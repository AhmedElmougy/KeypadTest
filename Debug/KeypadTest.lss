
KeypadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00000b6e  00000be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017e8  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000996  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d03  00000000  00000000  00002fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000414  00000000  00000000  00003cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000087e  00000000  00000000  000040e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015eb  00000000  00000000  00004966  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00005f51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3c       	cpi	r26, 0xC8	; 200
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 17 03 	call	0x62e	; 0x62e <main>
  7a:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HKPD_u8InitializeKeypad>:
 * Description : initialize 4X4 keypad at a given port set 4 pins output and 4 pins input
 * Arguments   : void
 * Return      : void  
 */
 void HKPD_u8InitializeKeypad(void)
 {
  82:	cf 92       	push	r12
  84:	df 92       	push	r13
  86:	ef 92       	push	r14
  88:	ff 92       	push	r15
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	04 e6       	ldi	r16, 0x64	; 100
  94:	10 e0       	ldi	r17, 0x00	; 0
  96:	c0 e6       	ldi	r28, 0x60	; 96
  98:	d0 e0       	ldi	r29, 0x00	; 0
  9a:	0f 2e       	mov	r0, r31
  9c:	f4 e6       	ldi	r31, 0x64	; 100
  9e:	cf 2e       	mov	r12, r31
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	df 2e       	mov	r13, r31
  a4:	f0 2d       	mov	r31, r0
	
	 /*for loop to scan all keypad columns and rows*/
	 for (u8 i = 0 ; i<4 ; i++)
	 {
	 	 /*set column current bit in ColumnArray[] OUTPUT*/
		 MDIO_u8SetDirectionBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_OUTPUT);
  a6:	f8 01       	movw	r30, r16
  a8:	61 91       	ld	r22, Z+
  aa:	8f 01       	movw	r16, r30
  ac:	41 e0       	ldi	r20, 0x01	; 1
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <MDIO_u8SetDirectionBit>
  b4:	7e 01       	movw	r14, r28
	
		 /*set current bit in RowArray[] INPUT*/
		 MDIO_u8SetDirectionBit(KEYPAD_PORT,HKPD_u8RowArray[i],MDIO_INPUT);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	69 91       	ld	r22, Y+
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <MDIO_u8SetDirectionBit>
		
		 /*Enable pull up resistor for current bit in RowArray[]*/
		 MDIO_u8ConfigPullupBit(KEYPAD_PORT,HKPD_u8RowArray[i],MDIO_EN_PULL_UP_RES);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	f7 01       	movw	r30, r14
  c4:	60 81       	ld	r22, Z
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	0e 94 93 04 	call	0x926	; 0x926 <MDIO_u8ConfigPullupBit>
 */
 void HKPD_u8InitializeKeypad(void)
 {
	
	 /*for loop to scan all keypad columns and rows*/
	 for (u8 i = 0 ; i<4 ; i++)
  cc:	cc 15       	cp	r28, r12
  ce:	dd 05       	cpc	r29, r13
  d0:	51 f7       	brne	.-44     	; 0xa6 <HKPD_u8InitializeKeypad+0x24>
		 /*Enable pull up resistor for current bit in RowArray[]*/
		 MDIO_u8ConfigPullupBit(KEYPAD_PORT,HKPD_u8RowArray[i],MDIO_EN_PULL_UP_RES);
		
	 }/*end of for loop*/
	
 }/*end of HKPD_u8InitializeKeypad()*/
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	1f 91       	pop	r17
  d8:	0f 91       	pop	r16
  da:	ff 90       	pop	r15
  dc:	ef 90       	pop	r14
  de:	df 90       	pop	r13
  e0:	cf 90       	pop	r12
  e2:	08 95       	ret

000000e4 <HKPD_GetPressedKey>:
 * Description : Return which key in the keypad has been pressed
 * Arguments   : void
 * return      : u8 pressed key
 */
 u8 HKPD_GetPressedKey(void)
 {
  e4:	6f 92       	push	r6
  e6:	7f 92       	push	r7
  e8:	8f 92       	push	r8
  ea:	9f 92       	push	r9
  ec:	af 92       	push	r10
  ee:	bf 92       	push	r11
  f0:	cf 92       	push	r12
  f2:	df 92       	push	r13
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	0f 2e       	mov	r0, r31
 102:	f4 e6       	ldi	r31, 0x64	; 100
 104:	ef 2e       	mov	r14, r31
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ff 2e       	mov	r15, r31
 10a:	f0 2d       	mov	r31, r0
 10c:	08 e6       	ldi	r16, 0x68	; 104
 10e:	10 e0       	ldi	r17, 0x00	; 0
 110:	e7 01       	movw	r28, r14
	 
	/*for loop to set all column pins HIGH*/
	for (u8 i = 0; i<4 ;i++ )
	{
		/*set current pin in ColumnArray HIGH*/
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_HIGH);
 112:	69 91       	ld	r22, Y+
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 */
 u8 HKPD_GetPressedKey(void)
 {
	 
	/*for loop to set all column pins HIGH*/
	for (u8 i = 0; i<4 ;i++ )
 11c:	c0 17       	cp	r28, r16
 11e:	d1 07       	cpc	r29, r17
 120:	c1 f7       	brne	.-16     	; 0x112 <HKPD_GetPressedKey+0x2e>
 122:	c1 2c       	mov	r12, r1
 124:	d1 2c       	mov	r13, r1
	
	/*for loop to scan all keypad columns*/
	for (u8 i = 0 ; i<4 ; i++)
	{
		/*set current column pin low to test all row pins to find out which button has been pressed*/
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_LOW);
 126:	46 01       	movw	r8, r12
 128:	57 01       	movw	r10, r14
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	f7 01       	movw	r30, r14
 12e:	60 81       	ld	r22, Z
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 136:	c0 e6       	ldi	r28, 0x60	; 96
 138:	d0 e0       	ldi	r29, 0x00	; 0
 13a:	61 2c       	mov	r6, r1
 13c:	71 2c       	mov	r7, r1
		
		/*for loop to scan and test all keypad row pins*/
		for (u8 j = 0 ; j<4 ; j++)
		{
			/*check current row pin value*/
			if ( MDIO_LOW == MDIO_u8ReadBit(KEYPAD_PORT,HKPD_u8RowArray[j]) )
 13e:	83 01       	movw	r16, r6
 140:	69 91       	ld	r22, Y+
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 5e 04 	call	0x8bc	; 0x8bc <MDIO_u8ReadBit>
 148:	81 11       	cpse	r24, r1
 14a:	0b c0       	rjmp	.+22     	; 0x162 <HKPD_GetPressedKey+0x7e>
			{
				/*return pressed button value*/
				return KeyPadArr[j][i];
 14c:	00 0f       	add	r16, r16
 14e:	11 1f       	adc	r17, r17
 150:	00 0f       	add	r16, r16
 152:	11 1f       	adc	r17, r17
 154:	06 59       	subi	r16, 0x96	; 150
 156:	1f 4f       	sbci	r17, 0xFF	; 255
 158:	f8 01       	movw	r30, r16
 15a:	e8 0d       	add	r30, r8
 15c:	f9 1d       	adc	r31, r9
 15e:	80 81       	ld	r24, Z
 160:	18 c0       	rjmp	.+48     	; 0x192 <HKPD_GetPressedKey+0xae>
 162:	ff ef       	ldi	r31, 0xFF	; 255
 164:	6f 1a       	sub	r6, r31
 166:	7f 0a       	sbc	r7, r31
	{
		/*set current column pin low to test all row pins to find out which button has been pressed*/
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_LOW);
		
		/*for loop to scan and test all keypad row pins*/
		for (u8 j = 0 ; j<4 ; j++)
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	68 16       	cp	r6, r24
 16c:	71 04       	cpc	r7, r1
 16e:	39 f7       	brne	.-50     	; 0x13e <HKPD_GetPressedKey+0x5a>
 170:	ef ef       	ldi	r30, 0xFF	; 255
 172:	ee 1a       	sub	r14, r30
 174:	fe 0a       	sbc	r15, r30
				return KeyPadArr[j][i];
			}	
		}/*end of for loop*/
		
		/*set current column pin HIGH again*/
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_HIGH);
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	f5 01       	movw	r30, r10
 17a:	60 81       	ld	r22, Z
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 182:	ff ef       	ldi	r31, 0xFF	; 255
 184:	cf 1a       	sub	r12, r31
 186:	df 0a       	sbc	r13, r31
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_HIGH);
		
	}/*end of for loop*/
	
	/*for loop to scan all keypad columns*/
	for (u8 i = 0 ; i<4 ; i++)
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	c8 16       	cp	r12, r24
 18c:	d1 04       	cpc	r13, r1
 18e:	59 f6       	brne	.-106    	; 0x126 <HKPD_GetPressedKey+0x42>
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_HIGH);
		
	}/*end of for loop*/	
	
	/*Report no Button pressed*/
	return '?';
 190:	8f e3       	ldi	r24, 0x3F	; 63
		
}/*end of HKPD_GetPressedKey()*/
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	1f 91       	pop	r17
 198:	0f 91       	pop	r16
 19a:	ff 90       	pop	r15
 19c:	ef 90       	pop	r14
 19e:	df 90       	pop	r13
 1a0:	cf 90       	pop	r12
 1a2:	bf 90       	pop	r11
 1a4:	af 90       	pop	r10
 1a6:	9f 90       	pop	r9
 1a8:	8f 90       	pop	r8
 1aa:	7f 90       	pop	r7
 1ac:	6f 90       	pop	r6
 1ae:	08 95       	ret

000001b0 <HLCD_voidWriteData>:
		  /*Shift cursor one step Left instruction*/
		  HLCD_voidWriteCommand(HLCD_CURSOR_SHIFT_LEFT); 
		  
	  }/*end of steps for loop*/
	  
  }/*end of HLCD_voidCursorShiftLeft()*/
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	e8 2e       	mov	r14, r24
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 1d2:	c4 e0       	ldi	r28, 0x04	; 4
 1d4:	d0 e0       	ldi	r29, 0x00	; 0
 1d6:	f1 2c       	mov	r15, r1
 1d8:	87 01       	movw	r16, r14
 1da:	a7 01       	movw	r20, r14
 1dc:	0c 2e       	mov	r0, r28
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <HLCD_voidWriteData+0x34>
 1e0:	55 95       	asr	r21
 1e2:	47 95       	ror	r20
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <HLCD_voidWriteData+0x30>
 1e8:	41 70       	andi	r20, 0x01	; 1
 1ea:	6c 2f       	mov	r22, r28
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 1f2:	21 96       	adiw	r28, 0x01	; 1
 1f4:	c8 30       	cpi	r28, 0x08	; 8
 1f6:	d1 05       	cpc	r29, r1
 1f8:	79 f7       	brne	.-34     	; 0x1d8 <HLCD_voidWriteData+0x28>
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 af 02 	call	0x55e	; 0x55e <LDelay_voidDelay_ms>
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 21a:	c4 e0       	ldi	r28, 0x04	; 4
 21c:	e1 2c       	mov	r14, r1
 21e:	f1 2c       	mov	r15, r1
 220:	a8 01       	movw	r20, r16
 222:	0e 2c       	mov	r0, r14
 224:	02 c0       	rjmp	.+4      	; 0x22a <HLCD_voidWriteData+0x7a>
 226:	55 95       	asr	r21
 228:	47 95       	ror	r20
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <HLCD_voidWriteData+0x76>
 22e:	41 70       	andi	r20, 0x01	; 1
 230:	6c 2f       	mov	r22, r28
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	e8 1a       	sub	r14, r24
 23c:	f8 0a       	sbc	r15, r24
 23e:	cf 5f       	subi	r28, 0xFF	; 255
 240:	c8 30       	cpi	r28, 0x08	; 8
 242:	71 f7       	brne	.-36     	; 0x220 <HLCD_voidWriteData+0x70>
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 24e:	62 e0       	ldi	r22, 0x02	; 2
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 af 02 	call	0x55e	; 0x55e <LDelay_voidDelay_ms>
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	ff 90       	pop	r15
 26e:	ef 90       	pop	r14
 270:	08 95       	ret

00000272 <HLCD_voidWriteCommand>:
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	e8 2e       	mov	r14, r24
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	84 e0       	ldi	r24, 0x04	; 4
 286:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	62 e0       	ldi	r22, 0x02	; 2
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 294:	c4 e0       	ldi	r28, 0x04	; 4
 296:	d0 e0       	ldi	r29, 0x00	; 0
 298:	f1 2c       	mov	r15, r1
 29a:	87 01       	movw	r16, r14
 29c:	a7 01       	movw	r20, r14
 29e:	0c 2e       	mov	r0, r28
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <HLCD_voidWriteCommand+0x34>
 2a2:	55 95       	asr	r21
 2a4:	47 95       	ror	r20
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <HLCD_voidWriteCommand+0x30>
 2aa:	41 70       	andi	r20, 0x01	; 1
 2ac:	6c 2f       	mov	r22, r28
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 2b4:	21 96       	adiw	r28, 0x01	; 1
 2b6:	c8 30       	cpi	r28, 0x08	; 8
 2b8:	d1 05       	cpc	r29, r1
 2ba:	79 f7       	brne	.-34     	; 0x29a <HLCD_voidWriteCommand+0x28>
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 2c6:	62 e0       	ldi	r22, 0x02	; 2
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 af 02 	call	0x55e	; 0x55e <LDelay_voidDelay_ms>
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 2dc:	c4 e0       	ldi	r28, 0x04	; 4
 2de:	e1 2c       	mov	r14, r1
 2e0:	f1 2c       	mov	r15, r1
 2e2:	a8 01       	movw	r20, r16
 2e4:	0e 2c       	mov	r0, r14
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <HLCD_voidWriteCommand+0x7a>
 2e8:	55 95       	asr	r21
 2ea:	47 95       	ror	r20
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <HLCD_voidWriteCommand+0x76>
 2f0:	41 70       	andi	r20, 0x01	; 1
 2f2:	6c 2f       	mov	r22, r28
 2f4:	84 e0       	ldi	r24, 0x04	; 4
 2f6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	e8 1a       	sub	r14, r24
 2fe:	f8 0a       	sbc	r15, r24
 300:	cf 5f       	subi	r28, 0xFF	; 255
 302:	c8 30       	cpi	r28, 0x08	; 8
 304:	71 f7       	brne	.-36     	; 0x2e2 <HLCD_voidWriteCommand+0x70>
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	84 e0       	ldi	r24, 0x04	; 4
 30c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 af 02 	call	0x55e	; 0x55e <LDelay_voidDelay_ms>
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	84 e0       	ldi	r24, 0x04	; 4
 322:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MDIO_u8WriteBit>
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	08 95       	ret

00000334 <HLCD_voidInitializeLCD>:
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	84 e0       	ldi	r24, 0x04	; 4
 346:	0e 94 52 03 	call	0x6a4	; 0x6a4 <MDIO_u8SetDirectionBit>
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	0e 94 52 03 	call	0x6a4	; 0x6a4 <MDIO_u8SetDirectionBit>
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	84 e0       	ldi	r24, 0x04	; 4
 35a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <MDIO_u8SetDirectionBit>
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	84 e0       	ldi	r24, 0x04	; 4
 362:	0e 94 36 03 	call	0x66c	; 0x66c <MDIO_u8SetDirectionReg>
 366:	62 e3       	ldi	r22, 0x32	; 50
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 af 02 	call	0x55e	; 0x55e <LDelay_voidDelay_ms>
 372:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <FontSizeAndLineCommand>
 376:	8b 7f       	andi	r24, 0xFB	; 251
 378:	88 60       	ori	r24, 0x08	; 8
 37a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <FontSizeAndLineCommand>
 37e:	82 e2       	ldi	r24, 0x22	; 34
 380:	0e 94 39 01 	call	0x272	; 0x272 <HLCD_voidWriteCommand>
 384:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <FontSizeAndLineCommand>
 388:	0e 94 39 01 	call	0x272	; 0x272 <HLCD_voidWriteCommand>
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 af 02 	call	0x55e	; 0x55e <LDelay_voidDelay_ms>
 398:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
 39c:	0e 94 39 01 	call	0x272	; 0x272 <HLCD_voidWriteCommand>
 3a0:	61 e0       	ldi	r22, 0x01	; 1
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 af 02 	call	0x55e	; 0x55e <LDelay_voidDelay_ms>
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 39 01 	call	0x272	; 0x272 <HLCD_voidWriteCommand>
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 af 02 	call	0x55e	; 0x55e <LDelay_voidDelay_ms>
 3be:	86 e0       	ldi	r24, 0x06	; 6
 3c0:	0e 94 39 01 	call	0x272	; 0x272 <HLCD_voidWriteCommand>
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 af 02 	call	0x55e	; 0x55e <LDelay_voidDelay_ms>
 3d0:	80 e4       	ldi	r24, 0x40	; 64
 3d2:	0e 94 39 01 	call	0x272	; 0x272 <HLCD_voidWriteCommand>
 3d6:	ca e7       	ldi	r28, 0x7A	; 122
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
 3da:	0f 2e       	mov	r0, r31
 3dc:	fa eb       	ldi	r31, 0xBA	; 186
 3de:	ef 2e       	mov	r14, r31
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	ff 2e       	mov	r15, r31
 3e4:	f0 2d       	mov	r31, r0
 3e6:	0a c0       	rjmp	.+20     	; 0x3fc <HLCD_voidInitializeLCD+0xc8>
 3e8:	89 91       	ld	r24, Y+
 3ea:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <HLCD_voidWriteData>
 3ee:	c0 17       	cp	r28, r16
 3f0:	d1 07       	cpc	r29, r17
 3f2:	d1 f7       	brne	.-12     	; 0x3e8 <HLCD_voidInitializeLCD+0xb4>
 3f4:	e8 01       	movw	r28, r16
 3f6:	e0 16       	cp	r14, r16
 3f8:	f1 06       	cpc	r15, r17
 3fa:	21 f0       	breq	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fc:	8e 01       	movw	r16, r28
 3fe:	08 5f       	subi	r16, 0xF8	; 248
 400:	1f 4f       	sbci	r17, 0xFF	; 255
 402:	f2 cf       	rjmp	.-28     	; 0x3e8 <HLCD_voidInitializeLCD+0xb4>
 404:	80 e8       	ldi	r24, 0x80	; 128
 406:	0e 94 39 01 	call	0x272	; 0x272 <HLCD_voidWriteCommand>
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	ff 90       	pop	r15
 414:	ef 90       	pop	r14
 416:	08 95       	ret

00000418 <HLCD_voidSelectLine>:
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	19 f0       	breq	.+6      	; 0x422 <HLCD_voidSelectLine+0xa>
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	29 f0       	breq	.+10     	; 0x42a <HLCD_voidSelectLine+0x12>
 420:	08 95       	ret
 422:	80 e8       	ldi	r24, 0x80	; 128
 424:	0e 94 39 01 	call	0x272	; 0x272 <HLCD_voidWriteCommand>
 428:	08 95       	ret
 42a:	80 ec       	ldi	r24, 0xC0	; 192
 42c:	0e 94 39 01 	call	0x272	; 0x272 <HLCD_voidWriteCommand>
 430:	08 95       	ret

00000432 <HLCD_voidDisplayChar>:
 432:	8a 30       	cpi	r24, 0x0A	; 10
 434:	20 f4       	brcc	.+8      	; 0x43e <HLCD_voidDisplayChar+0xc>
 436:	80 5d       	subi	r24, 0xD0	; 208
 438:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <HLCD_voidWriteData>
 43c:	08 95       	ret
 43e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <HLCD_voidWriteData>
 442:	08 95       	ret

00000444 <HLCD_voidDisplayString>:
 444:	bf 92       	push	r11
 446:	cf 92       	push	r12
 448:	df 92       	push	r13
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	ec 01       	movw	r28, r24
 458:	61 11       	cpse	r22, r1
 45a:	48 c0       	rjmp	.+144    	; 0x4ec <HLCD_voidDisplayString+0xa8>
 45c:	c8 80       	ld	r12, Y
 45e:	d9 80       	ldd	r13, Y+1	; 0x01
 460:	ea 80       	ldd	r14, Y+2	; 0x02
 462:	fb 80       	ldd	r15, Y+3	; 0x03
 464:	c1 14       	cp	r12, r1
 466:	d1 04       	cpc	r13, r1
 468:	e1 04       	cpc	r14, r1
 46a:	f1 04       	cpc	r15, r1
 46c:	21 f4       	brne	.+8      	; 0x476 <HLCD_voidDisplayString+0x32>
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	0e 94 19 02 	call	0x432	; 0x432 <HLCD_voidDisplayChar>
 474:	46 c0       	rjmp	.+140    	; 0x502 <HLCD_voidDisplayString+0xbe>
 476:	d0 e0       	ldi	r29, 0x00	; 0
 478:	19 e0       	ldi	r17, 0x09	; 9
 47a:	c1 2f       	mov	r28, r17
 47c:	cd 1b       	sub	r28, r29
 47e:	6c 2f       	mov	r22, r28
 480:	8a e0       	ldi	r24, 0x0A	; 10
 482:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LMATH_u32GetExponential>
 486:	9b 01       	movw	r18, r22
 488:	ac 01       	movw	r20, r24
 48a:	c7 01       	movw	r24, r14
 48c:	b6 01       	movw	r22, r12
 48e:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
 492:	23 2b       	or	r18, r19
 494:	24 2b       	or	r18, r20
 496:	25 2b       	or	r18, r21
 498:	29 f1       	breq	.+74     	; 0x4e4 <HLCD_voidDisplayString+0xa0>
 49a:	da 30       	cpi	r29, 0x0A	; 10
 49c:	90 f5       	brcc	.+100    	; 0x502 <HLCD_voidDisplayString+0xbe>
 49e:	6c 2f       	mov	r22, r28
 4a0:	8a e0       	ldi	r24, 0x0A	; 10
 4a2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LMATH_u32GetExponential>
 4a6:	9b 01       	movw	r18, r22
 4a8:	ac 01       	movw	r20, r24
 4aa:	c7 01       	movw	r24, r14
 4ac:	b6 01       	movw	r22, r12
 4ae:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
 4b2:	b6 2e       	mov	r11, r22
 4b4:	07 2f       	mov	r16, r23
 4b6:	18 2f       	mov	r17, r24
 4b8:	d9 2f       	mov	r29, r25
 4ba:	6c 2f       	mov	r22, r28
 4bc:	8a e0       	ldi	r24, 0x0A	; 10
 4be:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LMATH_u32GetExponential>
 4c2:	9b 01       	movw	r18, r22
 4c4:	ac 01       	movw	r20, r24
 4c6:	c7 01       	movw	r24, r14
 4c8:	b6 01       	movw	r22, r12
 4ca:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
 4ce:	82 2f       	mov	r24, r18
 4d0:	0e 94 19 02 	call	0x432	; 0x432 <HLCD_voidDisplayChar>
 4d4:	c1 50       	subi	r28, 0x01	; 1
 4d6:	cb 2c       	mov	r12, r11
 4d8:	d0 2e       	mov	r13, r16
 4da:	e1 2e       	mov	r14, r17
 4dc:	fd 2e       	mov	r15, r29
 4de:	cf 3f       	cpi	r28, 0xFF	; 255
 4e0:	f1 f6       	brne	.-68     	; 0x49e <HLCD_voidDisplayString+0x5a>
 4e2:	0f c0       	rjmp	.+30     	; 0x502 <HLCD_voidDisplayString+0xbe>
 4e4:	df 5f       	subi	r29, 0xFF	; 255
 4e6:	da 30       	cpi	r29, 0x0A	; 10
 4e8:	41 f6       	brne	.-112    	; 0x47a <HLCD_voidDisplayString+0x36>
 4ea:	0b c0       	rjmp	.+22     	; 0x502 <HLCD_voidDisplayString+0xbe>
 4ec:	61 30       	cpi	r22, 0x01	; 1
 4ee:	49 f4       	brne	.+18     	; 0x502 <HLCD_voidDisplayString+0xbe>
 4f0:	88 81       	ld	r24, Y
 4f2:	88 23       	and	r24, r24
 4f4:	31 f0       	breq	.+12     	; 0x502 <HLCD_voidDisplayString+0xbe>
 4f6:	21 96       	adiw	r28, 0x01	; 1
 4f8:	0e 94 19 02 	call	0x432	; 0x432 <HLCD_voidDisplayChar>
 4fc:	89 91       	ld	r24, Y+
 4fe:	81 11       	cpse	r24, r1
 500:	fb cf       	rjmp	.-10     	; 0x4f8 <HLCD_voidDisplayString+0xb4>
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	df 90       	pop	r13
 510:	cf 90       	pop	r12
 512:	bf 90       	pop	r11
 514:	08 95       	ret

00000516 <HLCD_voidCursorDisplayOnOff>:
  * return      : void  
  */
  void HLCD_voidCursorDisplayOnOff(u8 Copy_u8Status)
  {
	  /*Set Display status value (on or off)*/
	  L_UTILS_SET_BIT_VALUE(DisplayAndCursorCommand,HLCD_CURSOR_BIT,Copy_u8Status);
 516:	81 11       	cpse	r24, r1
 518:	06 c0       	rjmp	.+12     	; 0x526 <HLCD_voidCursorDisplayOnOff+0x10>
 51a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
 51e:	8d 7f       	andi	r24, 0xFD	; 253
 520:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <DisplayAndCursorCommand>
 524:	05 c0       	rjmp	.+10     	; 0x530 <HLCD_voidCursorDisplayOnOff+0x1a>
 526:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
 52a:	82 60       	ori	r24, 0x02	; 2
 52c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <DisplayAndCursorCommand>
	  /*Send command*/
	  HLCD_voidWriteCommand(DisplayAndCursorCommand);
 530:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
 534:	0e 94 39 01 	call	0x272	; 0x272 <HLCD_voidWriteCommand>
 538:	08 95       	ret

0000053a <HLCD_voidCursorBlinkOnOff>:
  * return      : void  
  */
  void HLCD_voidCursorBlinkOnOff(u8 Copy_u8Status) 
  {
	  /*Set Cursor status value (on or off)*/
	  L_UTILS_SET_BIT_VALUE(DisplayAndCursorCommand,HLCD_BLINK_BIT,Copy_u8Status);
 53a:	81 11       	cpse	r24, r1
 53c:	06 c0       	rjmp	.+12     	; 0x54a <HLCD_voidCursorBlinkOnOff+0x10>
 53e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
 542:	8e 7f       	andi	r24, 0xFE	; 254
 544:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <DisplayAndCursorCommand>
 548:	05 c0       	rjmp	.+10     	; 0x554 <HLCD_voidCursorBlinkOnOff+0x1a>
 54a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
 54e:	81 60       	ori	r24, 0x01	; 1
 550:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <DisplayAndCursorCommand>
	  /*Send command*/
	  HLCD_voidWriteCommand(DisplayAndCursorCommand);
 554:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
 558:	0e 94 39 01 	call	0x272	; 0x272 <HLCD_voidWriteCommand>
 55c:	08 95       	ret

0000055e <LDelay_voidDelay_ms>:
#include "LDELAY_Interface.h"
#include "LDELAY_Private.h"


void LDelay_voidDelay_ms(u32 Copy_u32Time_ms)
{
 55e:	8f 92       	push	r8
 560:	9f 92       	push	r9
 562:	af 92       	push	r10
 564:	bf 92       	push	r11
 566:	cf 92       	push	r12
 568:	df 92       	push	r13
 56a:	ef 92       	push	r14
 56c:	ff 92       	push	r15
 56e:	0f 93       	push	r16
 570:	9b 01       	movw	r18, r22
 572:	ac 01       	movw	r20, r24
	
	Copy_u32Time_ms = (Copy_u32Time_ms * 100000)-(LDELAY_CalculationTime + LDELAY_ContextSwitch);
 574:	60 ea       	ldi	r22, 0xA0	; 160
 576:	76 e8       	ldi	r23, 0x86	; 134
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsi3>
	u32 Local_u32NoLoops = Copy_u32Time_ms/LDELAY_LoopTime;
 580:	66 56       	subi	r22, 0x66	; 102
 582:	79 40       	sbci	r23, 0x09	; 9
 584:	81 09       	sbc	r24, r1
 586:	91 09       	sbc	r25, r1
 588:	29 eb       	ldi	r18, 0xB9	; 185
 58a:	35 e7       	ldi	r19, 0x75	; 117
 58c:	49 e7       	ldi	r20, 0x79	; 121
 58e:	57 e0       	ldi	r21, 0x07	; 7
 590:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__umulsidi3>
 594:	00 e2       	ldi	r16, 0x20	; 32
 596:	0e 94 81 05 	call	0xb02	; 0xb02 <__lshrdi3>
 59a:	82 2e       	mov	r8, r18
 59c:	93 2e       	mov	r9, r19
 59e:	a4 2e       	mov	r10, r20
 5a0:	b5 2e       	mov	r11, r21
 5a2:	b6 94       	lsr	r11
 5a4:	a7 94       	ror	r10
 5a6:	97 94       	ror	r9
 5a8:	87 94       	ror	r8
 5aa:	b6 94       	lsr	r11
 5ac:	a7 94       	ror	r10
 5ae:	97 94       	ror	r9
 5b0:	87 94       	ror	r8
	for(u32 i=0;i<Local_u32NoLoops;i++)
 5b2:	81 14       	cp	r8, r1
 5b4:	91 04       	cpc	r9, r1
 5b6:	a1 04       	cpc	r10, r1
 5b8:	b1 04       	cpc	r11, r1
 5ba:	61 f0       	breq	.+24     	; 0x5d4 <LDelay_voidDelay_ms+0x76>
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	dc 01       	movw	r26, r24
	{
		asm("NOP");
 5c2:	00 00       	nop
void LDelay_voidDelay_ms(u32 Copy_u32Time_ms)
{
	
	Copy_u32Time_ms = (Copy_u32Time_ms * 100000)-(LDELAY_CalculationTime + LDELAY_ContextSwitch);
	u32 Local_u32NoLoops = Copy_u32Time_ms/LDELAY_LoopTime;
	for(u32 i=0;i<Local_u32NoLoops;i++)
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	a1 1d       	adc	r26, r1
 5c8:	b1 1d       	adc	r27, r1
 5ca:	88 16       	cp	r8, r24
 5cc:	99 06       	cpc	r9, r25
 5ce:	aa 06       	cpc	r10, r26
 5d0:	bb 06       	cpc	r11, r27
 5d2:	b9 f7       	brne	.-18     	; 0x5c2 <LDelay_voidDelay_ms+0x64>
	{
		asm("NOP");
	}
	
}
 5d4:	0f 91       	pop	r16
 5d6:	ff 90       	pop	r15
 5d8:	ef 90       	pop	r14
 5da:	df 90       	pop	r13
 5dc:	cf 90       	pop	r12
 5de:	bf 90       	pop	r11
 5e0:	af 90       	pop	r10
 5e2:	9f 90       	pop	r9
 5e4:	8f 90       	pop	r8
 5e6:	08 95       	ret

000005e8 <LMATH_u32GetExponential>:
 * Description : module that calculate exponential value for a given base and exponent numbers   
 * Argument    : exponent, base
 * return      : exponential value
 */
u32 LMATH_u32GetExponential(u8 Copy_u8LBase, u8 Copy_u8LExponent)
{
 5e8:	cf 92       	push	r12
 5ea:	df 92       	push	r13
 5ec:	ef 92       	push	r14
 5ee:	ff 92       	push	r15
 5f0:	c8 2e       	mov	r12, r24
 5f2:	f6 2f       	mov	r31, r22
    u32 Local_u32Result = 1;
    for(u8 i =0; i<Copy_u8LExponent;i++)
 5f4:	66 23       	and	r22, r22
 5f6:	91 f0       	breq	.+36     	; 0x61c <LMATH_u32GetExponential+0x34>
 5f8:	e0 e0       	ldi	r30, 0x00	; 0
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	90 e0       	ldi	r25, 0x00	; 0
    {
        Local_u32Result *= Copy_u8LBase;
 602:	d1 2c       	mov	r13, r1
 604:	e1 2c       	mov	r14, r1
 606:	f1 2c       	mov	r15, r1
 608:	9b 01       	movw	r18, r22
 60a:	ac 01       	movw	r20, r24
 60c:	c7 01       	movw	r24, r14
 60e:	b6 01       	movw	r22, r12
 610:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsi3>
 * return      : exponential value
 */
u32 LMATH_u32GetExponential(u8 Copy_u8LBase, u8 Copy_u8LExponent)
{
    u32 Local_u32Result = 1;
    for(u8 i =0; i<Copy_u8LExponent;i++)
 614:	ef 5f       	subi	r30, 0xFF	; 255
 616:	fe 13       	cpse	r31, r30
 618:	f7 cf       	rjmp	.-18     	; 0x608 <LMATH_u32GetExponential+0x20>
 61a:	04 c0       	rjmp	.+8      	; 0x624 <LMATH_u32GetExponential+0x3c>
 * Argument    : exponent, base
 * return      : exponential value
 */
u32 LMATH_u32GetExponential(u8 Copy_u8LBase, u8 Copy_u8LExponent)
{
    u32 Local_u32Result = 1;
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	90 e0       	ldi	r25, 0x00	; 0
    for(u8 i =0; i<Copy_u8LExponent;i++)
    {
        Local_u32Result *= Copy_u8LBase;
    }
    return Local_u32Result;
}
 624:	ff 90       	pop	r15
 626:	ef 90       	pop	r14
 628:	df 90       	pop	r13
 62a:	cf 90       	pop	r12
 62c:	08 95       	ret

0000062e <main>:
{
	/*global variables*/
	u8 APP_u8KeypadButtonValue = 0;
	
	/*initialize Keypad at PORTB*/
	HKPD_u8InitializeKeypad();
 62e:	0e 94 41 00 	call	0x82	; 0x82 <HKPD_u8InitializeKeypad>
	/*initialize LCD*/
	HLCD_voidInitializeLCD();
 632:	0e 94 9a 01 	call	0x334	; 0x334 <HLCD_voidInitializeLCD>
	
	/*Display fixed string*/
	HLCD_voidCursorDisplayOnOff(HLCD_OFF);
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0e 94 8b 02 	call	0x516	; 0x516 <HLCD_voidCursorDisplayOnOff>
	HLCD_voidCursorBlinkOnOff(HLCD_OFF);
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	0e 94 9d 02 	call	0x53a	; 0x53a <HLCD_voidCursorBlinkOnOff>
	HLCD_voidDisplayString("Pressed Char:",HLCD_STRING);
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	8a eb       	ldi	r24, 0xBA	; 186
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 22 02 	call	0x444	; 0x444 <HLCD_voidDisplayString>
	
	while (1) 
    {
		/*read pressed key*/
		APP_u8KeypadButtonValue = HKPD_GetPressedKey();
 64c:	0e 94 72 00 	call	0xe4	; 0xe4 <HKPD_GetPressedKey>
 650:	c8 2f       	mov	r28, r24
		/*display pressed keys*/
		HLCD_voidSelectLine(HLCD_LINE2); 
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	0e 94 0c 02 	call	0x418	; 0x418 <HLCD_voidSelectLine>
		HLCD_voidDisplayChar(APP_u8KeypadButtonValue);
 658:	8c 2f       	mov	r24, r28
 65a:	0e 94 19 02 	call	0x432	; 0x432 <HLCD_voidDisplayChar>
		LDelay_voidDelay_ms(10);
 65e:	6a e0       	ldi	r22, 0x0A	; 10
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 af 02 	call	0x55e	; 0x55e <LDelay_voidDelay_ms>
 66a:	f0 cf       	rjmp	.-32     	; 0x64c <main+0x1e>

0000066c <MDIO_u8SetDirectionReg>:
		case MDIO_PORTD : {DIO_PORTD = Local_u8PullUpResStatus; return 0;}  break;
		default         : return 1; /*error Undefined Port*/
			
	}/*end of register switch case*/

}/*end of MDIO_u8ConfigPullupReg()*/
 66c:	61 30       	cpi	r22, 0x01	; 1
 66e:	09 f4       	brne	.+2      	; 0x672 <MDIO_u8SetDirectionReg+0x6>
 670:	6f ef       	ldi	r22, 0xFF	; 255
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	61 f0       	breq	.+24     	; 0x68e <MDIO_u8SetDirectionReg+0x22>
 676:	18 f4       	brcc	.+6      	; 0x67e <MDIO_u8SetDirectionReg+0x12>
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	31 f0       	breq	.+12     	; 0x688 <MDIO_u8SetDirectionReg+0x1c>
 67c:	11 c0       	rjmp	.+34     	; 0x6a0 <MDIO_u8SetDirectionReg+0x34>
 67e:	83 30       	cpi	r24, 0x03	; 3
 680:	49 f0       	breq	.+18     	; 0x694 <MDIO_u8SetDirectionReg+0x28>
 682:	84 30       	cpi	r24, 0x04	; 4
 684:	51 f0       	breq	.+20     	; 0x69a <MDIO_u8SetDirectionReg+0x2e>
 686:	0c c0       	rjmp	.+24     	; 0x6a0 <MDIO_u8SetDirectionReg+0x34>
 688:	6a bb       	out	0x1a, r22	; 26
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	08 95       	ret
 68e:	67 bb       	out	0x17, r22	; 23
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	08 95       	ret
 694:	64 bb       	out	0x14, r22	; 20
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	08 95       	ret
 69a:	61 bb       	out	0x11, r22	; 17
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	08 95       	ret
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	08 95       	ret

000006a4 <MDIO_u8SetDirectionBit>:
 6a4:	68 30       	cpi	r22, 0x08	; 8
 6a6:	08 f0       	brcs	.+2      	; 0x6aa <MDIO_u8SetDirectionBit+0x6>
 6a8:	7f c0       	rjmp	.+254    	; 0x7a8 <MDIO_u8SetDirectionBit+0x104>
 6aa:	42 30       	cpi	r20, 0x02	; 2
 6ac:	08 f0       	brcs	.+2      	; 0x6b0 <MDIO_u8SetDirectionBit+0xc>
 6ae:	7e c0       	rjmp	.+252    	; 0x7ac <MDIO_u8SetDirectionBit+0x108>
 6b0:	82 30       	cpi	r24, 0x02	; 2
 6b2:	31 f1       	breq	.+76     	; 0x700 <MDIO_u8SetDirectionBit+0x5c>
 6b4:	18 f4       	brcc	.+6      	; 0x6bc <MDIO_u8SetDirectionBit+0x18>
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	39 f0       	breq	.+14     	; 0x6c8 <MDIO_u8SetDirectionBit+0x24>
 6ba:	7a c0       	rjmp	.+244    	; 0x7b0 <MDIO_u8SetDirectionBit+0x10c>
 6bc:	83 30       	cpi	r24, 0x03	; 3
 6be:	e1 f1       	breq	.+120    	; 0x738 <MDIO_u8SetDirectionBit+0x94>
 6c0:	84 30       	cpi	r24, 0x04	; 4
 6c2:	09 f4       	brne	.+2      	; 0x6c6 <MDIO_u8SetDirectionBit+0x22>
 6c4:	55 c0       	rjmp	.+170    	; 0x770 <MDIO_u8SetDirectionBit+0xcc>
 6c6:	74 c0       	rjmp	.+232    	; 0x7b0 <MDIO_u8SetDirectionBit+0x10c>
 6c8:	41 11       	cpse	r20, r1
 6ca:	0d c0       	rjmp	.+26     	; 0x6e6 <MDIO_u8SetDirectionBit+0x42>
 6cc:	9a b3       	in	r25, 0x1a	; 26
 6ce:	21 e0       	ldi	r18, 0x01	; 1
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <MDIO_u8SetDirectionBit+0x34>
 6d4:	22 0f       	add	r18, r18
 6d6:	33 1f       	adc	r19, r19
 6d8:	6a 95       	dec	r22
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <MDIO_u8SetDirectionBit+0x30>
 6dc:	82 2f       	mov	r24, r18
 6de:	80 95       	com	r24
 6e0:	89 23       	and	r24, r25
 6e2:	8a bb       	out	0x1a, r24	; 26
 6e4:	0a c0       	rjmp	.+20     	; 0x6fa <MDIO_u8SetDirectionBit+0x56>
 6e6:	2a b3       	in	r18, 0x1a	; 26
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <MDIO_u8SetDirectionBit+0x4e>
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	6a 95       	dec	r22
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <MDIO_u8SetDirectionBit+0x4a>
 6f6:	82 2b       	or	r24, r18
 6f8:	8a bb       	out	0x1a, r24	; 26
 6fa:	8a bb       	out	0x1a, r24	; 26
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	08 95       	ret
 700:	41 11       	cpse	r20, r1
 702:	0d c0       	rjmp	.+26     	; 0x71e <MDIO_u8SetDirectionBit+0x7a>
 704:	97 b3       	in	r25, 0x17	; 23
 706:	21 e0       	ldi	r18, 0x01	; 1
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <MDIO_u8SetDirectionBit+0x6c>
 70c:	22 0f       	add	r18, r18
 70e:	33 1f       	adc	r19, r19
 710:	6a 95       	dec	r22
 712:	e2 f7       	brpl	.-8      	; 0x70c <MDIO_u8SetDirectionBit+0x68>
 714:	82 2f       	mov	r24, r18
 716:	80 95       	com	r24
 718:	89 23       	and	r24, r25
 71a:	87 bb       	out	0x17, r24	; 23
 71c:	0a c0       	rjmp	.+20     	; 0x732 <MDIO_u8SetDirectionBit+0x8e>
 71e:	27 b3       	in	r18, 0x17	; 23
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 c0       	rjmp	.+4      	; 0x72a <MDIO_u8SetDirectionBit+0x86>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	6a 95       	dec	r22
 72c:	e2 f7       	brpl	.-8      	; 0x726 <MDIO_u8SetDirectionBit+0x82>
 72e:	82 2b       	or	r24, r18
 730:	87 bb       	out	0x17, r24	; 23
 732:	87 bb       	out	0x17, r24	; 23
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	08 95       	ret
 738:	41 11       	cpse	r20, r1
 73a:	0d c0       	rjmp	.+26     	; 0x756 <MDIO_u8SetDirectionBit+0xb2>
 73c:	94 b3       	in	r25, 0x14	; 20
 73e:	21 e0       	ldi	r18, 0x01	; 1
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <MDIO_u8SetDirectionBit+0xa4>
 744:	22 0f       	add	r18, r18
 746:	33 1f       	adc	r19, r19
 748:	6a 95       	dec	r22
 74a:	e2 f7       	brpl	.-8      	; 0x744 <MDIO_u8SetDirectionBit+0xa0>
 74c:	82 2f       	mov	r24, r18
 74e:	80 95       	com	r24
 750:	89 23       	and	r24, r25
 752:	84 bb       	out	0x14, r24	; 20
 754:	0a c0       	rjmp	.+20     	; 0x76a <MDIO_u8SetDirectionBit+0xc6>
 756:	24 b3       	in	r18, 0x14	; 20
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <MDIO_u8SetDirectionBit+0xbe>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	6a 95       	dec	r22
 764:	e2 f7       	brpl	.-8      	; 0x75e <MDIO_u8SetDirectionBit+0xba>
 766:	82 2b       	or	r24, r18
 768:	84 bb       	out	0x14, r24	; 20
 76a:	84 bb       	out	0x14, r24	; 20
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	08 95       	ret
 770:	41 11       	cpse	r20, r1
 772:	0d c0       	rjmp	.+26     	; 0x78e <MDIO_u8SetDirectionBit+0xea>
 774:	91 b3       	in	r25, 0x11	; 17
 776:	21 e0       	ldi	r18, 0x01	; 1
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	02 c0       	rjmp	.+4      	; 0x780 <MDIO_u8SetDirectionBit+0xdc>
 77c:	22 0f       	add	r18, r18
 77e:	33 1f       	adc	r19, r19
 780:	6a 95       	dec	r22
 782:	e2 f7       	brpl	.-8      	; 0x77c <MDIO_u8SetDirectionBit+0xd8>
 784:	82 2f       	mov	r24, r18
 786:	80 95       	com	r24
 788:	89 23       	and	r24, r25
 78a:	81 bb       	out	0x11, r24	; 17
 78c:	0a c0       	rjmp	.+20     	; 0x7a2 <MDIO_u8SetDirectionBit+0xfe>
 78e:	21 b3       	in	r18, 0x11	; 17
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <MDIO_u8SetDirectionBit+0xf6>
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	6a 95       	dec	r22
 79c:	e2 f7       	brpl	.-8      	; 0x796 <MDIO_u8SetDirectionBit+0xf2>
 79e:	82 2b       	or	r24, r18
 7a0:	81 bb       	out	0x11, r24	; 17
 7a2:	81 bb       	out	0x11, r24	; 17
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	08 95       	ret
 7a8:	82 e0       	ldi	r24, 0x02	; 2
 7aa:	08 95       	ret
 7ac:	83 e0       	ldi	r24, 0x03	; 3
 7ae:	08 95       	ret
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	08 95       	ret

000007b4 <MDIO_u8WriteBit>:
 7b4:	68 30       	cpi	r22, 0x08	; 8
 7b6:	08 f0       	brcs	.+2      	; 0x7ba <MDIO_u8WriteBit+0x6>
 7b8:	7b c0       	rjmp	.+246    	; 0x8b0 <__stack+0x51>
 7ba:	42 30       	cpi	r20, 0x02	; 2
 7bc:	08 f0       	brcs	.+2      	; 0x7c0 <MDIO_u8WriteBit+0xc>
 7be:	7a c0       	rjmp	.+244    	; 0x8b4 <__stack+0x55>
 7c0:	82 30       	cpi	r24, 0x02	; 2
 7c2:	29 f1       	breq	.+74     	; 0x80e <MDIO_u8WriteBit+0x5a>
 7c4:	18 f4       	brcc	.+6      	; 0x7cc <MDIO_u8WriteBit+0x18>
 7c6:	81 30       	cpi	r24, 0x01	; 1
 7c8:	39 f0       	breq	.+14     	; 0x7d8 <MDIO_u8WriteBit+0x24>
 7ca:	76 c0       	rjmp	.+236    	; 0x8b8 <__stack+0x59>
 7cc:	83 30       	cpi	r24, 0x03	; 3
 7ce:	d1 f1       	breq	.+116    	; 0x844 <MDIO_u8WriteBit+0x90>
 7d0:	84 30       	cpi	r24, 0x04	; 4
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <MDIO_u8WriteBit+0x22>
 7d4:	52 c0       	rjmp	.+164    	; 0x87a <__stack+0x1b>
 7d6:	70 c0       	rjmp	.+224    	; 0x8b8 <__stack+0x59>
 7d8:	41 11       	cpse	r20, r1
 7da:	0d c0       	rjmp	.+26     	; 0x7f6 <MDIO_u8WriteBit+0x42>
 7dc:	2b b3       	in	r18, 0x1b	; 27
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <MDIO_u8WriteBit+0x34>
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	6a 95       	dec	r22
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <MDIO_u8WriteBit+0x30>
 7ec:	80 95       	com	r24
 7ee:	82 23       	and	r24, r18
 7f0:	8b bb       	out	0x1b, r24	; 27
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	08 95       	ret
 7f6:	2b b3       	in	r18, 0x1b	; 27
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <MDIO_u8WriteBit+0x4e>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	6a 95       	dec	r22
 804:	e2 f7       	brpl	.-8      	; 0x7fe <MDIO_u8WriteBit+0x4a>
 806:	82 2b       	or	r24, r18
 808:	8b bb       	out	0x1b, r24	; 27
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	08 95       	ret
 80e:	41 11       	cpse	r20, r1
 810:	0d c0       	rjmp	.+26     	; 0x82c <MDIO_u8WriteBit+0x78>
 812:	28 b3       	in	r18, 0x18	; 24
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	02 c0       	rjmp	.+4      	; 0x81e <MDIO_u8WriteBit+0x6a>
 81a:	88 0f       	add	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	6a 95       	dec	r22
 820:	e2 f7       	brpl	.-8      	; 0x81a <MDIO_u8WriteBit+0x66>
 822:	80 95       	com	r24
 824:	82 23       	and	r24, r18
 826:	88 bb       	out	0x18, r24	; 24
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	08 95       	ret
 82c:	28 b3       	in	r18, 0x18	; 24
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	02 c0       	rjmp	.+4      	; 0x838 <MDIO_u8WriteBit+0x84>
 834:	88 0f       	add	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	6a 95       	dec	r22
 83a:	e2 f7       	brpl	.-8      	; 0x834 <MDIO_u8WriteBit+0x80>
 83c:	82 2b       	or	r24, r18
 83e:	88 bb       	out	0x18, r24	; 24
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	08 95       	ret
 844:	41 11       	cpse	r20, r1
 846:	0d c0       	rjmp	.+26     	; 0x862 <__stack+0x3>
 848:	25 b3       	in	r18, 0x15	; 21
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <MDIO_u8WriteBit+0xa0>
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	6a 95       	dec	r22
 856:	e2 f7       	brpl	.-8      	; 0x850 <MDIO_u8WriteBit+0x9c>
 858:	80 95       	com	r24
 85a:	82 23       	and	r24, r18
 85c:	85 bb       	out	0x15, r24	; 21
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	08 95       	ret
 862:	25 b3       	in	r18, 0x15	; 21
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
 86a:	88 0f       	add	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	6a 95       	dec	r22
 870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
 872:	82 2b       	or	r24, r18
 874:	85 bb       	out	0x15, r24	; 21
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	08 95       	ret
 87a:	41 11       	cpse	r20, r1
 87c:	0d c0       	rjmp	.+26     	; 0x898 <__stack+0x39>
 87e:	22 b3       	in	r18, 0x12	; 18
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	6a 95       	dec	r22
 88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
 88e:	80 95       	com	r24
 890:	82 23       	and	r24, r18
 892:	82 bb       	out	0x12, r24	; 18
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	08 95       	ret
 898:	22 b3       	in	r18, 0x12	; 18
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	6a 95       	dec	r22
 8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
 8a8:	82 2b       	or	r24, r18
 8aa:	82 bb       	out	0x12, r24	; 18
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	08 95       	ret
 8b0:	82 e0       	ldi	r24, 0x02	; 2
 8b2:	08 95       	ret
 8b4:	83 e0       	ldi	r24, 0x03	; 3
 8b6:	08 95       	ret
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	08 95       	ret

000008bc <MDIO_u8ReadBit>:
 8bc:	68 30       	cpi	r22, 0x08	; 8
 8be:	78 f5       	brcc	.+94     	; 0x91e <MDIO_u8ReadBit+0x62>
 8c0:	82 30       	cpi	r24, 0x02	; 2
 8c2:	91 f0       	breq	.+36     	; 0x8e8 <MDIO_u8ReadBit+0x2c>
 8c4:	18 f4       	brcc	.+6      	; 0x8cc <MDIO_u8ReadBit+0x10>
 8c6:	81 30       	cpi	r24, 0x01	; 1
 8c8:	31 f0       	breq	.+12     	; 0x8d6 <MDIO_u8ReadBit+0x1a>
 8ca:	2b c0       	rjmp	.+86     	; 0x922 <MDIO_u8ReadBit+0x66>
 8cc:	83 30       	cpi	r24, 0x03	; 3
 8ce:	a9 f0       	breq	.+42     	; 0x8fa <MDIO_u8ReadBit+0x3e>
 8d0:	84 30       	cpi	r24, 0x04	; 4
 8d2:	e1 f0       	breq	.+56     	; 0x90c <MDIO_u8ReadBit+0x50>
 8d4:	26 c0       	rjmp	.+76     	; 0x922 <MDIO_u8ReadBit+0x66>
 8d6:	89 b3       	in	r24, 0x19	; 25
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <MDIO_u8ReadBit+0x24>
 8dc:	95 95       	asr	r25
 8de:	87 95       	ror	r24
 8e0:	6a 95       	dec	r22
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc <MDIO_u8ReadBit+0x20>
 8e4:	81 70       	andi	r24, 0x01	; 1
 8e6:	08 95       	ret
 8e8:	86 b3       	in	r24, 0x16	; 22
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <MDIO_u8ReadBit+0x36>
 8ee:	95 95       	asr	r25
 8f0:	87 95       	ror	r24
 8f2:	6a 95       	dec	r22
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <MDIO_u8ReadBit+0x32>
 8f6:	81 70       	andi	r24, 0x01	; 1
 8f8:	08 95       	ret
 8fa:	83 b3       	in	r24, 0x13	; 19
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <MDIO_u8ReadBit+0x48>
 900:	95 95       	asr	r25
 902:	87 95       	ror	r24
 904:	6a 95       	dec	r22
 906:	e2 f7       	brpl	.-8      	; 0x900 <MDIO_u8ReadBit+0x44>
 908:	81 70       	andi	r24, 0x01	; 1
 90a:	08 95       	ret
 90c:	80 b3       	in	r24, 0x10	; 16
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	02 c0       	rjmp	.+4      	; 0x916 <MDIO_u8ReadBit+0x5a>
 912:	95 95       	asr	r25
 914:	87 95       	ror	r24
 916:	6a 95       	dec	r22
 918:	e2 f7       	brpl	.-8      	; 0x912 <MDIO_u8ReadBit+0x56>
 91a:	81 70       	andi	r24, 0x01	; 1
 91c:	08 95       	ret
 91e:	83 e0       	ldi	r24, 0x03	; 3
 920:	08 95       	ret
 922:	82 e0       	ldi	r24, 0x02	; 2
 924:	08 95       	ret

00000926 <MDIO_u8ConfigPullupBit>:
 *               resistor status value out of range
 */
u8 MDIO_u8ConfigPullupBit(u8 Copy_u8Reg,u8 Copy_u8Bit,u8 Copy_u8PullUpResStatus)
{
	/*Pull up res status check condition*/
	if( (MDIO_EN_PULL_UP_RES == Copy_u8PullUpResStatus) || (MDIO_DIS_PULL_UP_RES == Copy_u8PullUpResStatus) )
 926:	42 30       	cpi	r20, 0x02	; 2
 928:	08 f0       	brcs	.+2      	; 0x92c <MDIO_u8ConfigPullupBit+0x6>
 92a:	7b c0       	rjmp	.+246    	; 0xa22 <MDIO_u8ConfigPullupBit+0xfc>
	{
		/*bit number check condition*/
		if( (Copy_u8Bit >= 0) && (Copy_u8Bit < 8) )
 92c:	68 30       	cpi	r22, 0x08	; 8
 92e:	08 f0       	brcs	.+2      	; 0x932 <MDIO_u8ConfigPullupBit+0xc>
 930:	7a c0       	rjmp	.+244    	; 0xa26 <MDIO_u8ConfigPullupBit+0x100>
		{
			/*register switch case*/
			switch (Copy_u8Reg)
 932:	82 30       	cpi	r24, 0x02	; 2
 934:	29 f1       	breq	.+74     	; 0x980 <MDIO_u8ConfigPullupBit+0x5a>
 936:	18 f4       	brcc	.+6      	; 0x93e <MDIO_u8ConfigPullupBit+0x18>
 938:	81 30       	cpi	r24, 0x01	; 1
 93a:	39 f0       	breq	.+14     	; 0x94a <MDIO_u8ConfigPullupBit+0x24>
 93c:	76 c0       	rjmp	.+236    	; 0xa2a <MDIO_u8ConfigPullupBit+0x104>
 93e:	83 30       	cpi	r24, 0x03	; 3
 940:	d1 f1       	breq	.+116    	; 0x9b6 <MDIO_u8ConfigPullupBit+0x90>
 942:	84 30       	cpi	r24, 0x04	; 4
 944:	09 f4       	brne	.+2      	; 0x948 <MDIO_u8ConfigPullupBit+0x22>
 946:	52 c0       	rjmp	.+164    	; 0x9ec <MDIO_u8ConfigPullupBit+0xc6>
 948:	70 c0       	rjmp	.+224    	; 0xa2a <MDIO_u8ConfigPullupBit+0x104>
			{
				/*Configure bit value in PORTx reg with chosen pull up res status(Copy_u8PullUpResStatus)*/
				case MDIO_PORTA : {L_UTILS_SET_BIT_VALUE(DIO_PORTA,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
 94a:	41 11       	cpse	r20, r1
 94c:	0d c0       	rjmp	.+26     	; 0x968 <MDIO_u8ConfigPullupBit+0x42>
 94e:	2b b3       	in	r18, 0x1b	; 27
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	02 c0       	rjmp	.+4      	; 0x95a <MDIO_u8ConfigPullupBit+0x34>
 956:	88 0f       	add	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	6a 95       	dec	r22
 95c:	e2 f7       	brpl	.-8      	; 0x956 <MDIO_u8ConfigPullupBit+0x30>
 95e:	80 95       	com	r24
 960:	82 23       	and	r24, r18
 962:	8b bb       	out	0x1b, r24	; 27
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	08 95       	ret
 968:	2b b3       	in	r18, 0x1b	; 27
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	02 c0       	rjmp	.+4      	; 0x974 <MDIO_u8ConfigPullupBit+0x4e>
 970:	88 0f       	add	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	6a 95       	dec	r22
 976:	e2 f7       	brpl	.-8      	; 0x970 <MDIO_u8ConfigPullupBit+0x4a>
 978:	82 2b       	or	r24, r18
 97a:	8b bb       	out	0x1b, r24	; 27
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	08 95       	ret
				case MDIO_PORTB : {L_UTILS_SET_BIT_VALUE(DIO_PORTB,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
 980:	41 11       	cpse	r20, r1
 982:	0d c0       	rjmp	.+26     	; 0x99e <MDIO_u8ConfigPullupBit+0x78>
 984:	28 b3       	in	r18, 0x18	; 24
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	02 c0       	rjmp	.+4      	; 0x990 <MDIO_u8ConfigPullupBit+0x6a>
 98c:	88 0f       	add	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	6a 95       	dec	r22
 992:	e2 f7       	brpl	.-8      	; 0x98c <MDIO_u8ConfigPullupBit+0x66>
 994:	80 95       	com	r24
 996:	82 23       	and	r24, r18
 998:	88 bb       	out	0x18, r24	; 24
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	08 95       	ret
 99e:	28 b3       	in	r18, 0x18	; 24
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <MDIO_u8ConfigPullupBit+0x84>
 9a6:	88 0f       	add	r24, r24
 9a8:	99 1f       	adc	r25, r25
 9aa:	6a 95       	dec	r22
 9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <MDIO_u8ConfigPullupBit+0x80>
 9ae:	82 2b       	or	r24, r18
 9b0:	88 bb       	out	0x18, r24	; 24
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	08 95       	ret
				case MDIO_PORTC : {L_UTILS_SET_BIT_VALUE(DIO_PORTC,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
 9b6:	41 11       	cpse	r20, r1
 9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <MDIO_u8ConfigPullupBit+0xae>
 9ba:	25 b3       	in	r18, 0x15	; 21
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <MDIO_u8ConfigPullupBit+0xa0>
 9c2:	88 0f       	add	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	6a 95       	dec	r22
 9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <MDIO_u8ConfigPullupBit+0x9c>
 9ca:	80 95       	com	r24
 9cc:	82 23       	and	r24, r18
 9ce:	85 bb       	out	0x15, r24	; 21
 9d0:	80 e0       	ldi	r24, 0x00	; 0
 9d2:	08 95       	ret
 9d4:	25 b3       	in	r18, 0x15	; 21
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <MDIO_u8ConfigPullupBit+0xba>
 9dc:	88 0f       	add	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	6a 95       	dec	r22
 9e2:	e2 f7       	brpl	.-8      	; 0x9dc <MDIO_u8ConfigPullupBit+0xb6>
 9e4:	82 2b       	or	r24, r18
 9e6:	85 bb       	out	0x15, r24	; 21
 9e8:	80 e0       	ldi	r24, 0x00	; 0
 9ea:	08 95       	ret
				case MDIO_PORTD : {L_UTILS_SET_BIT_VALUE(DIO_PORTD,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
 9ec:	41 11       	cpse	r20, r1
 9ee:	0d c0       	rjmp	.+26     	; 0xa0a <MDIO_u8ConfigPullupBit+0xe4>
 9f0:	22 b3       	in	r18, 0x12	; 18
 9f2:	81 e0       	ldi	r24, 0x01	; 1
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <MDIO_u8ConfigPullupBit+0xd6>
 9f8:	88 0f       	add	r24, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	6a 95       	dec	r22
 9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <MDIO_u8ConfigPullupBit+0xd2>
 a00:	80 95       	com	r24
 a02:	82 23       	and	r24, r18
 a04:	82 bb       	out	0x12, r24	; 18
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	08 95       	ret
 a0a:	22 b3       	in	r18, 0x12	; 18
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <MDIO_u8ConfigPullupBit+0xf0>
 a12:	88 0f       	add	r24, r24
 a14:	99 1f       	adc	r25, r25
 a16:	6a 95       	dec	r22
 a18:	e2 f7       	brpl	.-8      	; 0xa12 <MDIO_u8ConfigPullupBit+0xec>
 a1a:	82 2b       	or	r24, r18
 a1c:	82 bb       	out	0x12, r24	; 18
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	08 95       	ret

	}
	else
	{
		/*Report Pull up res status value out of range error*/
		return 3;
 a22:	83 e0       	ldi	r24, 0x03	; 3
 a24:	08 95       	ret
			}/*end of Register switch case*/
		}
		else
		{
			/*Report Bit number out of range error*/
			return 2; 
 a26:	82 e0       	ldi	r24, 0x02	; 2
 a28:	08 95       	ret
				/*Configure bit value in PORTx reg with chosen pull up res status(Copy_u8PullUpResStatus)*/
				case MDIO_PORTA : {L_UTILS_SET_BIT_VALUE(DIO_PORTA,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				case MDIO_PORTB : {L_UTILS_SET_BIT_VALUE(DIO_PORTB,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				case MDIO_PORTC : {L_UTILS_SET_BIT_VALUE(DIO_PORTC,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				case MDIO_PORTD : {L_UTILS_SET_BIT_VALUE(DIO_PORTD,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				default         : return 1;  /*error Undefined Port*/
 a2a:	81 e0       	ldi	r24, 0x01	; 1
		/*Report Pull up res status value out of range error*/
		return 3;

	}/*end of Pull up res status check condition*/
	
 a2c:	08 95       	ret

00000a2e <__mulsi3>:
 a2e:	db 01       	movw	r26, r22
 a30:	8f 93       	push	r24
 a32:	9f 93       	push	r25
 a34:	0e 94 49 05 	call	0xa92	; 0xa92 <__muluhisi3>
 a38:	bf 91       	pop	r27
 a3a:	af 91       	pop	r26
 a3c:	a2 9f       	mul	r26, r18
 a3e:	80 0d       	add	r24, r0
 a40:	91 1d       	adc	r25, r1
 a42:	a3 9f       	mul	r26, r19
 a44:	90 0d       	add	r25, r0
 a46:	b2 9f       	mul	r27, r18
 a48:	90 0d       	add	r25, r0
 a4a:	11 24       	eor	r1, r1
 a4c:	08 95       	ret

00000a4e <__udivmodsi4>:
 a4e:	a1 e2       	ldi	r26, 0x21	; 33
 a50:	1a 2e       	mov	r1, r26
 a52:	aa 1b       	sub	r26, r26
 a54:	bb 1b       	sub	r27, r27
 a56:	fd 01       	movw	r30, r26
 a58:	0d c0       	rjmp	.+26     	; 0xa74 <__udivmodsi4_ep>

00000a5a <__udivmodsi4_loop>:
 a5a:	aa 1f       	adc	r26, r26
 a5c:	bb 1f       	adc	r27, r27
 a5e:	ee 1f       	adc	r30, r30
 a60:	ff 1f       	adc	r31, r31
 a62:	a2 17       	cp	r26, r18
 a64:	b3 07       	cpc	r27, r19
 a66:	e4 07       	cpc	r30, r20
 a68:	f5 07       	cpc	r31, r21
 a6a:	20 f0       	brcs	.+8      	; 0xa74 <__udivmodsi4_ep>
 a6c:	a2 1b       	sub	r26, r18
 a6e:	b3 0b       	sbc	r27, r19
 a70:	e4 0b       	sbc	r30, r20
 a72:	f5 0b       	sbc	r31, r21

00000a74 <__udivmodsi4_ep>:
 a74:	66 1f       	adc	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	1a 94       	dec	r1
 a7e:	69 f7       	brne	.-38     	; 0xa5a <__udivmodsi4_loop>
 a80:	60 95       	com	r22
 a82:	70 95       	com	r23
 a84:	80 95       	com	r24
 a86:	90 95       	com	r25
 a88:	9b 01       	movw	r18, r22
 a8a:	ac 01       	movw	r20, r24
 a8c:	bd 01       	movw	r22, r26
 a8e:	cf 01       	movw	r24, r30
 a90:	08 95       	ret

00000a92 <__muluhisi3>:
 a92:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__umulhisi3>
 a96:	a5 9f       	mul	r26, r21
 a98:	90 0d       	add	r25, r0
 a9a:	b4 9f       	mul	r27, r20
 a9c:	90 0d       	add	r25, r0
 a9e:	a4 9f       	mul	r26, r20
 aa0:	80 0d       	add	r24, r0
 aa2:	91 1d       	adc	r25, r1
 aa4:	11 24       	eor	r1, r1
 aa6:	08 95       	ret

00000aa8 <__umulsidi3>:
 aa8:	e8 94       	clt

00000aaa <__umulsidi3_helper>:
 aaa:	df 93       	push	r29
 aac:	cf 93       	push	r28
 aae:	fc 01       	movw	r30, r24
 ab0:	db 01       	movw	r26, r22
 ab2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__umulhisi3>
 ab6:	7f 93       	push	r23
 ab8:	6f 93       	push	r22
 aba:	e9 01       	movw	r28, r18
 abc:	9a 01       	movw	r18, r20
 abe:	ac 01       	movw	r20, r24
 ac0:	bf 93       	push	r27
 ac2:	af 93       	push	r26
 ac4:	3f 93       	push	r19
 ac6:	2f 93       	push	r18
 ac8:	df 01       	movw	r26, r30
 aca:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__umulhisi3>
 ace:	26 f4       	brtc	.+8      	; 0xad8 <__umulsidi3_helper+0x2e>
 ad0:	6c 1b       	sub	r22, r28
 ad2:	7d 0b       	sbc	r23, r29
 ad4:	82 0b       	sbc	r24, r18
 ad6:	93 0b       	sbc	r25, r19
 ad8:	9e 01       	movw	r18, r28
 ada:	eb 01       	movw	r28, r22
 adc:	fc 01       	movw	r30, r24
 ade:	0e 94 ac 05 	call	0xb58	; 0xb58 <__muldi3_6>
 ae2:	af 91       	pop	r26
 ae4:	bf 91       	pop	r27
 ae6:	2f 91       	pop	r18
 ae8:	3f 91       	pop	r19
 aea:	0e 94 ac 05 	call	0xb58	; 0xb58 <__muldi3_6>
 aee:	be 01       	movw	r22, r28
 af0:	cf 01       	movw	r24, r30
 af2:	f9 01       	movw	r30, r18
 af4:	2f 91       	pop	r18
 af6:	3f 91       	pop	r19
 af8:	cf 91       	pop	r28
 afa:	df 91       	pop	r29
 afc:	08 95       	ret

00000afe <__ashrdi3>:
 afe:	97 fb       	bst	r25, 7
 b00:	10 f8       	bld	r1, 0

00000b02 <__lshrdi3>:
 b02:	16 94       	lsr	r1
 b04:	00 08       	sbc	r0, r0
 b06:	0f 93       	push	r16
 b08:	08 30       	cpi	r16, 0x08	; 8
 b0a:	98 f0       	brcs	.+38     	; 0xb32 <__lshrdi3+0x30>
 b0c:	08 50       	subi	r16, 0x08	; 8
 b0e:	23 2f       	mov	r18, r19
 b10:	34 2f       	mov	r19, r20
 b12:	45 2f       	mov	r20, r21
 b14:	56 2f       	mov	r21, r22
 b16:	67 2f       	mov	r22, r23
 b18:	78 2f       	mov	r23, r24
 b1a:	89 2f       	mov	r24, r25
 b1c:	90 2d       	mov	r25, r0
 b1e:	f4 cf       	rjmp	.-24     	; 0xb08 <__lshrdi3+0x6>
 b20:	05 94       	asr	r0
 b22:	97 95       	ror	r25
 b24:	87 95       	ror	r24
 b26:	77 95       	ror	r23
 b28:	67 95       	ror	r22
 b2a:	57 95       	ror	r21
 b2c:	47 95       	ror	r20
 b2e:	37 95       	ror	r19
 b30:	27 95       	ror	r18
 b32:	0a 95       	dec	r16
 b34:	aa f7       	brpl	.-22     	; 0xb20 <__lshrdi3+0x1e>
 b36:	0f 91       	pop	r16
 b38:	08 95       	ret

00000b3a <__umulhisi3>:
 b3a:	a2 9f       	mul	r26, r18
 b3c:	b0 01       	movw	r22, r0
 b3e:	b3 9f       	mul	r27, r19
 b40:	c0 01       	movw	r24, r0
 b42:	a3 9f       	mul	r26, r19
 b44:	70 0d       	add	r23, r0
 b46:	81 1d       	adc	r24, r1
 b48:	11 24       	eor	r1, r1
 b4a:	91 1d       	adc	r25, r1
 b4c:	b2 9f       	mul	r27, r18
 b4e:	70 0d       	add	r23, r0
 b50:	81 1d       	adc	r24, r1
 b52:	11 24       	eor	r1, r1
 b54:	91 1d       	adc	r25, r1
 b56:	08 95       	ret

00000b58 <__muldi3_6>:
 b58:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__umulhisi3>
 b5c:	46 0f       	add	r20, r22
 b5e:	57 1f       	adc	r21, r23
 b60:	c8 1f       	adc	r28, r24
 b62:	d9 1f       	adc	r29, r25
 b64:	08 f4       	brcc	.+2      	; 0xb68 <__muldi3_6+0x10>
 b66:	31 96       	adiw	r30, 0x01	; 1
 b68:	08 95       	ret

00000b6a <_exit>:
 b6a:	f8 94       	cli

00000b6c <__stop_program>:
 b6c:	ff cf       	rjmp	.-2      	; 0xb6c <__stop_program>
